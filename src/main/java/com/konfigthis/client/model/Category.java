/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.68.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Category
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Category {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_CATEGORY_GROUP_ID = "category_group_id";
  @SerializedName(SERIALIZED_NAME_CATEGORY_GROUP_ID)
  private UUID categoryGroupId;

  public static final String SERIALIZED_NAME_CATEGORY_GROUP_NAME = "category_group_name";
  @SerializedName(SERIALIZED_NAME_CATEGORY_GROUP_NAME)
  private String categoryGroupName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_ORIGINAL_CATEGORY_GROUP_ID = "original_category_group_id";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_CATEGORY_GROUP_ID)
  private UUID originalCategoryGroupId;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_BUDGETED = "budgeted";
  @SerializedName(SERIALIZED_NAME_BUDGETED)
  private Long budgeted;

  public static final String SERIALIZED_NAME_ACTIVITY = "activity";
  @SerializedName(SERIALIZED_NAME_ACTIVITY)
  private Long activity;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Long balance;

  /**
   * The type of goal, if the category has a goal (TB&#x3D;&#39;Target Category Balance&#39;, TBD&#x3D;&#39;Target Category Balance by Date&#39;, MF&#x3D;&#39;Monthly Funding&#39;, NEED&#x3D;&#39;Plan Your Spending&#39;)
   */
  @JsonAdapter(GoalTypeEnum.Adapter.class)
 public enum GoalTypeEnum {
    TB("TB"),
    
    TBD("TBD"),
    
    MF("MF"),
    
    NEED("NEED"),
    
    DEBT("DEBT"),
    
    NULL("null");

    private String value;

    GoalTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GoalTypeEnum fromValue(String value) {
      for (GoalTypeEnum b : GoalTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GoalTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GoalTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GoalTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GoalTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GOAL_TYPE = "goal_type";
  @SerializedName(SERIALIZED_NAME_GOAL_TYPE)
  private GoalTypeEnum goalType;

  public static final String SERIALIZED_NAME_GOAL_DAY = "goal_day";
  @SerializedName(SERIALIZED_NAME_GOAL_DAY)
  private Integer goalDay;

  public static final String SERIALIZED_NAME_GOAL_CADENCE = "goal_cadence";
  @SerializedName(SERIALIZED_NAME_GOAL_CADENCE)
  private Integer goalCadence;

  public static final String SERIALIZED_NAME_GOAL_CADENCE_FREQUENCY = "goal_cadence_frequency";
  @SerializedName(SERIALIZED_NAME_GOAL_CADENCE_FREQUENCY)
  private Integer goalCadenceFrequency;

  public static final String SERIALIZED_NAME_GOAL_CREATION_MONTH = "goal_creation_month";
  @SerializedName(SERIALIZED_NAME_GOAL_CREATION_MONTH)
  private LocalDate goalCreationMonth;

  public static final String SERIALIZED_NAME_GOAL_TARGET = "goal_target";
  @SerializedName(SERIALIZED_NAME_GOAL_TARGET)
  private Long goalTarget;

  public static final String SERIALIZED_NAME_GOAL_TARGET_MONTH = "goal_target_month";
  @SerializedName(SERIALIZED_NAME_GOAL_TARGET_MONTH)
  private LocalDate goalTargetMonth;

  public static final String SERIALIZED_NAME_GOAL_PERCENTAGE_COMPLETE = "goal_percentage_complete";
  @SerializedName(SERIALIZED_NAME_GOAL_PERCENTAGE_COMPLETE)
  private Integer goalPercentageComplete;

  public static final String SERIALIZED_NAME_GOAL_MONTHS_TO_BUDGET = "goal_months_to_budget";
  @SerializedName(SERIALIZED_NAME_GOAL_MONTHS_TO_BUDGET)
  private Integer goalMonthsToBudget;

  public static final String SERIALIZED_NAME_GOAL_UNDER_FUNDED = "goal_under_funded";
  @SerializedName(SERIALIZED_NAME_GOAL_UNDER_FUNDED)
  private Long goalUnderFunded;

  public static final String SERIALIZED_NAME_GOAL_OVERALL_FUNDED = "goal_overall_funded";
  @SerializedName(SERIALIZED_NAME_GOAL_OVERALL_FUNDED)
  private Long goalOverallFunded;

  public static final String SERIALIZED_NAME_GOAL_OVERALL_LEFT = "goal_overall_left";
  @SerializedName(SERIALIZED_NAME_GOAL_OVERALL_LEFT)
  private Long goalOverallLeft;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public Category() {
  }

  public Category id(UUID id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    
    
    
    this.id = id;
  }


  public Category categoryGroupId(UUID categoryGroupId) {
    
    
    
    
    this.categoryGroupId = categoryGroupId;
    return this;
  }

   /**
   * Get categoryGroupId
   * @return categoryGroupId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getCategoryGroupId() {
    return categoryGroupId;
  }


  public void setCategoryGroupId(UUID categoryGroupId) {
    
    
    
    this.categoryGroupId = categoryGroupId;
  }


  public Category categoryGroupName(String categoryGroupName) {
    
    
    
    
    this.categoryGroupName = categoryGroupName;
    return this;
  }

   /**
   * Get categoryGroupName
   * @return categoryGroupName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCategoryGroupName() {
    return categoryGroupName;
  }


  public void setCategoryGroupName(String categoryGroupName) {
    
    
    
    this.categoryGroupName = categoryGroupName;
  }


  public Category name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Category hidden(Boolean hidden) {
    
    
    
    
    this.hidden = hidden;
    return this;
  }

   /**
   * Whether or not the category is hidden
   * @return hidden
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not the category is hidden")

  public Boolean getHidden() {
    return hidden;
  }


  public void setHidden(Boolean hidden) {
    
    
    
    this.hidden = hidden;
  }


  public Category originalCategoryGroupId(UUID originalCategoryGroupId) {
    
    
    
    
    this.originalCategoryGroupId = originalCategoryGroupId;
    return this;
  }

   /**
   * DEPRECATED: No longer used.  Value will always be null.
   * @return originalCategoryGroupId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "DEPRECATED: No longer used.  Value will always be null.")

  public UUID getOriginalCategoryGroupId() {
    return originalCategoryGroupId;
  }


  public void setOriginalCategoryGroupId(UUID originalCategoryGroupId) {
    
    
    
    this.originalCategoryGroupId = originalCategoryGroupId;
  }


  public Category note(String note) {
    
    
    
    
    this.note = note;
    return this;
  }

   /**
   * Get note
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    
    
    
    this.note = note;
  }


  public Category budgeted(Long budgeted) {
    
    
    
    
    this.budgeted = budgeted;
    return this;
  }

   /**
   * Budgeted amount in milliunits format
   * @return budgeted
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Budgeted amount in milliunits format")

  public Long getBudgeted() {
    return budgeted;
  }


  public void setBudgeted(Long budgeted) {
    
    
    
    this.budgeted = budgeted;
  }


  public Category activity(Long activity) {
    
    
    
    
    this.activity = activity;
    return this;
  }

   /**
   * Activity amount in milliunits format
   * @return activity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Activity amount in milliunits format")

  public Long getActivity() {
    return activity;
  }


  public void setActivity(Long activity) {
    
    
    
    this.activity = activity;
  }


  public Category balance(Long balance) {
    
    
    
    
    this.balance = balance;
    return this;
  }

   /**
   * Balance in milliunits format
   * @return balance
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Balance in milliunits format")

  public Long getBalance() {
    return balance;
  }


  public void setBalance(Long balance) {
    
    
    
    this.balance = balance;
  }


  public Category goalType(GoalTypeEnum goalType) {
    
    
    
    
    this.goalType = goalType;
    return this;
  }

   /**
   * The type of goal, if the category has a goal (TB&#x3D;&#39;Target Category Balance&#39;, TBD&#x3D;&#39;Target Category Balance by Date&#39;, MF&#x3D;&#39;Monthly Funding&#39;, NEED&#x3D;&#39;Plan Your Spending&#39;)
   * @return goalType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of goal, if the category has a goal (TB='Target Category Balance', TBD='Target Category Balance by Date', MF='Monthly Funding', NEED='Plan Your Spending')")

  public GoalTypeEnum getGoalType() {
    return goalType;
  }


  public void setGoalType(GoalTypeEnum goalType) {
    
    
    
    this.goalType = goalType;
  }


  public Category goalDay(Integer goalDay) {
    
    
    
    
    this.goalDay = goalDay;
    return this;
  }

   /**
   * A day offset modifier for the goal&#39;s due date. When goal_cadence is 2 (Weekly), this value specifies which day of the week the goal is due (0 &#x3D; Sunday, 6 &#x3D; Saturday). Otherwise, this value specifies which day of the month the goal is due (1 &#x3D; 1st, 31 &#x3D; 31st, null &#x3D; Last day of Month).
   * @return goalDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A day offset modifier for the goal's due date. When goal_cadence is 2 (Weekly), this value specifies which day of the week the goal is due (0 = Sunday, 6 = Saturday). Otherwise, this value specifies which day of the month the goal is due (1 = 1st, 31 = 31st, null = Last day of Month).")

  public Integer getGoalDay() {
    return goalDay;
  }


  public void setGoalDay(Integer goalDay) {
    
    
    
    this.goalDay = goalDay;
  }


  public Category goalCadence(Integer goalCadence) {
    
    
    
    
    this.goalCadence = goalCadence;
    return this;
  }

   /**
   * The goal cadence. Value in range 0-14. There are two subsets of these values which behave differently. For values 0, 1, 2, and 13, the goal&#39;s due date repeats every goal_cadence * goal_cadence_frequency, where 0 &#x3D; None, 1 &#x3D; Monthly, 2 &#x3D; Weekly, and 13 &#x3D; Yearly. For example, goal_cadence 1 with goal_cadence_frequency 2 means the goal is due every other month. For values 3-12 and 14, goal_cadence_frequency is ignored and the goal&#39;s due date repeats every goal_cadence, where 3 &#x3D; Every 2 Months, 4 &#x3D; Every 3 Months, ..., 12 &#x3D; Every 11 Months, and 14 &#x3D; Every 2 Years.
   * @return goalCadence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The goal cadence. Value in range 0-14. There are two subsets of these values which behave differently. For values 0, 1, 2, and 13, the goal's due date repeats every goal_cadence * goal_cadence_frequency, where 0 = None, 1 = Monthly, 2 = Weekly, and 13 = Yearly. For example, goal_cadence 1 with goal_cadence_frequency 2 means the goal is due every other month. For values 3-12 and 14, goal_cadence_frequency is ignored and the goal's due date repeats every goal_cadence, where 3 = Every 2 Months, 4 = Every 3 Months, ..., 12 = Every 11 Months, and 14 = Every 2 Years.")

  public Integer getGoalCadence() {
    return goalCadence;
  }


  public void setGoalCadence(Integer goalCadence) {
    
    
    
    this.goalCadence = goalCadence;
  }


  public Category goalCadenceFrequency(Integer goalCadenceFrequency) {
    
    
    
    
    this.goalCadenceFrequency = goalCadenceFrequency;
    return this;
  }

   /**
   * The goal cadence frequency. When goal_cadence is 0, 1, 2, or 13, a goal&#39;s due date repeats every goal_cadence * goal_cadence_frequency. For example, goal_cadence 1 with goal_cadence_frequency 2 means the goal is due every other month.  When goal_cadence is 3-12 or 14, goal_cadence_frequency is ignored.
   * @return goalCadenceFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The goal cadence frequency. When goal_cadence is 0, 1, 2, or 13, a goal's due date repeats every goal_cadence * goal_cadence_frequency. For example, goal_cadence 1 with goal_cadence_frequency 2 means the goal is due every other month.  When goal_cadence is 3-12 or 14, goal_cadence_frequency is ignored.")

  public Integer getGoalCadenceFrequency() {
    return goalCadenceFrequency;
  }


  public void setGoalCadenceFrequency(Integer goalCadenceFrequency) {
    
    
    
    this.goalCadenceFrequency = goalCadenceFrequency;
  }


  public Category goalCreationMonth(LocalDate goalCreationMonth) {
    
    
    
    
    this.goalCreationMonth = goalCreationMonth;
    return this;
  }

   /**
   * The month a goal was created
   * @return goalCreationMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The month a goal was created")

  public LocalDate getGoalCreationMonth() {
    return goalCreationMonth;
  }


  public void setGoalCreationMonth(LocalDate goalCreationMonth) {
    
    
    
    this.goalCreationMonth = goalCreationMonth;
  }


  public Category goalTarget(Long goalTarget) {
    
    
    
    
    this.goalTarget = goalTarget;
    return this;
  }

   /**
   * The goal target amount in milliunits
   * @return goalTarget
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The goal target amount in milliunits")

  public Long getGoalTarget() {
    return goalTarget;
  }


  public void setGoalTarget(Long goalTarget) {
    
    
    
    this.goalTarget = goalTarget;
  }


  public Category goalTargetMonth(LocalDate goalTargetMonth) {
    
    
    
    
    this.goalTargetMonth = goalTargetMonth;
    return this;
  }

   /**
   * The original target month for the goal to be completed.  Only some goal types specify this date.
   * @return goalTargetMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The original target month for the goal to be completed.  Only some goal types specify this date.")

  public LocalDate getGoalTargetMonth() {
    return goalTargetMonth;
  }


  public void setGoalTargetMonth(LocalDate goalTargetMonth) {
    
    
    
    this.goalTargetMonth = goalTargetMonth;
  }


  public Category goalPercentageComplete(Integer goalPercentageComplete) {
    
    
    
    
    this.goalPercentageComplete = goalPercentageComplete;
    return this;
  }

   /**
   * The percentage completion of the goal
   * @return goalPercentageComplete
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The percentage completion of the goal")

  public Integer getGoalPercentageComplete() {
    return goalPercentageComplete;
  }


  public void setGoalPercentageComplete(Integer goalPercentageComplete) {
    
    
    
    this.goalPercentageComplete = goalPercentageComplete;
  }


  public Category goalMonthsToBudget(Integer goalMonthsToBudget) {
    
    
    
    
    this.goalMonthsToBudget = goalMonthsToBudget;
    return this;
  }

   /**
   * The number of months, including the current month, left in the current goal period.
   * @return goalMonthsToBudget
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of months, including the current month, left in the current goal period.")

  public Integer getGoalMonthsToBudget() {
    return goalMonthsToBudget;
  }


  public void setGoalMonthsToBudget(Integer goalMonthsToBudget) {
    
    
    
    this.goalMonthsToBudget = goalMonthsToBudget;
  }


  public Category goalUnderFunded(Long goalUnderFunded) {
    
    
    
    
    this.goalUnderFunded = goalUnderFunded;
    return this;
  }

   /**
   * The amount of funding still needed in the current month to stay on track towards completing the goal within the current goal period. This amount will generally correspond to the &#39;Underfunded&#39; amount in the web and mobile clients except when viewing a category with a Needed for Spending Goal in a future month.  The web and mobile clients will ignore any funding from a prior goal period when viewing category with a Needed for Spending Goal in a future month.
   * @return goalUnderFunded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount of funding still needed in the current month to stay on track towards completing the goal within the current goal period. This amount will generally correspond to the 'Underfunded' amount in the web and mobile clients except when viewing a category with a Needed for Spending Goal in a future month.  The web and mobile clients will ignore any funding from a prior goal period when viewing category with a Needed for Spending Goal in a future month.")

  public Long getGoalUnderFunded() {
    return goalUnderFunded;
  }


  public void setGoalUnderFunded(Long goalUnderFunded) {
    
    
    
    this.goalUnderFunded = goalUnderFunded;
  }


  public Category goalOverallFunded(Long goalOverallFunded) {
    
    
    
    
    this.goalOverallFunded = goalOverallFunded;
    return this;
  }

   /**
   * The total amount funded towards the goal within the current goal period.
   * @return goalOverallFunded
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The total amount funded towards the goal within the current goal period.")

  public Long getGoalOverallFunded() {
    return goalOverallFunded;
  }


  public void setGoalOverallFunded(Long goalOverallFunded) {
    
    
    
    this.goalOverallFunded = goalOverallFunded;
  }


  public Category goalOverallLeft(Long goalOverallLeft) {
    
    
    
    
    this.goalOverallLeft = goalOverallLeft;
    return this;
  }

   /**
   * The amount of funding still needed to complete the goal within the current goal period.
   * @return goalOverallLeft
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount of funding still needed to complete the goal within the current goal period.")

  public Long getGoalOverallLeft() {
    return goalOverallLeft;
  }


  public void setGoalOverallLeft(Long goalOverallLeft) {
    
    
    
    this.goalOverallLeft = goalOverallLeft;
  }


  public Category deleted(Boolean deleted) {
    
    
    
    
    this.deleted = deleted;
    return this;
  }

   /**
   * Whether or not the category has been deleted.  Deleted categories will only be included in delta requests.
   * @return deleted
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not the category has been deleted.  Deleted categories will only be included in delta requests.")

  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    
    
    
    this.deleted = deleted;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Category instance itself
   */
  public Category putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Category category = (Category) o;
    return Objects.equals(this.id, category.id) &&
        Objects.equals(this.categoryGroupId, category.categoryGroupId) &&
        Objects.equals(this.categoryGroupName, category.categoryGroupName) &&
        Objects.equals(this.name, category.name) &&
        Objects.equals(this.hidden, category.hidden) &&
        Objects.equals(this.originalCategoryGroupId, category.originalCategoryGroupId) &&
        Objects.equals(this.note, category.note) &&
        Objects.equals(this.budgeted, category.budgeted) &&
        Objects.equals(this.activity, category.activity) &&
        Objects.equals(this.balance, category.balance) &&
        Objects.equals(this.goalType, category.goalType) &&
        Objects.equals(this.goalDay, category.goalDay) &&
        Objects.equals(this.goalCadence, category.goalCadence) &&
        Objects.equals(this.goalCadenceFrequency, category.goalCadenceFrequency) &&
        Objects.equals(this.goalCreationMonth, category.goalCreationMonth) &&
        Objects.equals(this.goalTarget, category.goalTarget) &&
        Objects.equals(this.goalTargetMonth, category.goalTargetMonth) &&
        Objects.equals(this.goalPercentageComplete, category.goalPercentageComplete) &&
        Objects.equals(this.goalMonthsToBudget, category.goalMonthsToBudget) &&
        Objects.equals(this.goalUnderFunded, category.goalUnderFunded) &&
        Objects.equals(this.goalOverallFunded, category.goalOverallFunded) &&
        Objects.equals(this.goalOverallLeft, category.goalOverallLeft) &&
        Objects.equals(this.deleted, category.deleted)&&
        Objects.equals(this.additionalProperties, category.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, categoryGroupId, categoryGroupName, name, hidden, originalCategoryGroupId, note, budgeted, activity, balance, goalType, goalDay, goalCadence, goalCadenceFrequency, goalCreationMonth, goalTarget, goalTargetMonth, goalPercentageComplete, goalMonthsToBudget, goalUnderFunded, goalOverallFunded, goalOverallLeft, deleted, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Category {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    categoryGroupId: ").append(toIndentedString(categoryGroupId)).append("\n");
    sb.append("    categoryGroupName: ").append(toIndentedString(categoryGroupName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    originalCategoryGroupId: ").append(toIndentedString(originalCategoryGroupId)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    budgeted: ").append(toIndentedString(budgeted)).append("\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    goalType: ").append(toIndentedString(goalType)).append("\n");
    sb.append("    goalDay: ").append(toIndentedString(goalDay)).append("\n");
    sb.append("    goalCadence: ").append(toIndentedString(goalCadence)).append("\n");
    sb.append("    goalCadenceFrequency: ").append(toIndentedString(goalCadenceFrequency)).append("\n");
    sb.append("    goalCreationMonth: ").append(toIndentedString(goalCreationMonth)).append("\n");
    sb.append("    goalTarget: ").append(toIndentedString(goalTarget)).append("\n");
    sb.append("    goalTargetMonth: ").append(toIndentedString(goalTargetMonth)).append("\n");
    sb.append("    goalPercentageComplete: ").append(toIndentedString(goalPercentageComplete)).append("\n");
    sb.append("    goalMonthsToBudget: ").append(toIndentedString(goalMonthsToBudget)).append("\n");
    sb.append("    goalUnderFunded: ").append(toIndentedString(goalUnderFunded)).append("\n");
    sb.append("    goalOverallFunded: ").append(toIndentedString(goalOverallFunded)).append("\n");
    sb.append("    goalOverallLeft: ").append(toIndentedString(goalOverallLeft)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("category_group_id");
    openapiFields.add("category_group_name");
    openapiFields.add("name");
    openapiFields.add("hidden");
    openapiFields.add("original_category_group_id");
    openapiFields.add("note");
    openapiFields.add("budgeted");
    openapiFields.add("activity");
    openapiFields.add("balance");
    openapiFields.add("goal_type");
    openapiFields.add("goal_day");
    openapiFields.add("goal_cadence");
    openapiFields.add("goal_cadence_frequency");
    openapiFields.add("goal_creation_month");
    openapiFields.add("goal_target");
    openapiFields.add("goal_target_month");
    openapiFields.add("goal_percentage_complete");
    openapiFields.add("goal_months_to_budget");
    openapiFields.add("goal_under_funded");
    openapiFields.add("goal_overall_funded");
    openapiFields.add("goal_overall_left");
    openapiFields.add("deleted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("category_group_id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("hidden");
    openapiRequiredFields.add("budgeted");
    openapiRequiredFields.add("activity");
    openapiRequiredFields.add("balance");
    openapiRequiredFields.add("deleted");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Category
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Category.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Category is not found in the empty JSON string", Category.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Category.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("category_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_group_id").toString()));
      }
      if ((jsonObj.get("category_group_name") != null && !jsonObj.get("category_group_name").isJsonNull()) && !jsonObj.get("category_group_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_group_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_group_name").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("original_category_group_id").isJsonNull() && (jsonObj.get("original_category_group_id") != null && !jsonObj.get("original_category_group_id").isJsonNull()) && !jsonObj.get("original_category_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_category_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_category_group_id").toString()));
      }
      if (!jsonObj.get("note").isJsonNull() && (jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (!jsonObj.get("goal_type").isJsonNull() && (jsonObj.get("goal_type") != null && !jsonObj.get("goal_type").isJsonNull()) && !jsonObj.get("goal_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goal_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goal_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Category.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Category' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Category> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Category.class));

       return (TypeAdapter<T>) new TypeAdapter<Category>() {
           @Override
           public void write(JsonWriter out, Category value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Category read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Category instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Category given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Category
  * @throws IOException if the JSON string is invalid with respect to Category
  */
  public static Category fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Category.class);
  }

 /**
  * Convert an instance of Category to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

