/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.68.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ScheduledTransactionDetail;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ScheduledTransactionsResponseData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ScheduledTransactionsResponseData {
  public static final String SERIALIZED_NAME_SCHEDULED_TRANSACTIONS = "scheduled_transactions";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TRANSACTIONS)
  private List<ScheduledTransactionDetail> scheduledTransactions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVER_KNOWLEDGE = "server_knowledge";
  @SerializedName(SERIALIZED_NAME_SERVER_KNOWLEDGE)
  private Long serverKnowledge;

  public ScheduledTransactionsResponseData() {
  }

  public ScheduledTransactionsResponseData scheduledTransactions(List<ScheduledTransactionDetail> scheduledTransactions) {
    
    
    
    
    this.scheduledTransactions = scheduledTransactions;
    return this;
  }

  public ScheduledTransactionsResponseData addScheduledTransactionsItem(ScheduledTransactionDetail scheduledTransactionsItem) {
    this.scheduledTransactions.add(scheduledTransactionsItem);
    return this;
  }

   /**
   * Get scheduledTransactions
   * @return scheduledTransactions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<ScheduledTransactionDetail> getScheduledTransactions() {
    return scheduledTransactions;
  }


  public void setScheduledTransactions(List<ScheduledTransactionDetail> scheduledTransactions) {
    
    
    
    this.scheduledTransactions = scheduledTransactions;
  }


  public ScheduledTransactionsResponseData serverKnowledge(Long serverKnowledge) {
    
    
    
    
    this.serverKnowledge = serverKnowledge;
    return this;
  }

   /**
   * The knowledge of the server
   * @return serverKnowledge
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The knowledge of the server")

  public Long getServerKnowledge() {
    return serverKnowledge;
  }


  public void setServerKnowledge(Long serverKnowledge) {
    
    
    
    this.serverKnowledge = serverKnowledge;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ScheduledTransactionsResponseData instance itself
   */
  public ScheduledTransactionsResponseData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduledTransactionsResponseData scheduledTransactionsResponseData = (ScheduledTransactionsResponseData) o;
    return Objects.equals(this.scheduledTransactions, scheduledTransactionsResponseData.scheduledTransactions) &&
        Objects.equals(this.serverKnowledge, scheduledTransactionsResponseData.serverKnowledge)&&
        Objects.equals(this.additionalProperties, scheduledTransactionsResponseData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scheduledTransactions, serverKnowledge, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduledTransactionsResponseData {\n");
    sb.append("    scheduledTransactions: ").append(toIndentedString(scheduledTransactions)).append("\n");
    sb.append("    serverKnowledge: ").append(toIndentedString(serverKnowledge)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scheduled_transactions");
    openapiFields.add("server_knowledge");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("scheduled_transactions");
    openapiRequiredFields.add("server_knowledge");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ScheduledTransactionsResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ScheduledTransactionsResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScheduledTransactionsResponseData is not found in the empty JSON string", ScheduledTransactionsResponseData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScheduledTransactionsResponseData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("scheduled_transactions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduled_transactions` to be an array in the JSON string but got `%s`", jsonObj.get("scheduled_transactions").toString()));
      }

      JsonArray jsonArrayscheduledTransactions = jsonObj.getAsJsonArray("scheduled_transactions");
      // validate the required field `scheduled_transactions` (array)
      for (int i = 0; i < jsonArrayscheduledTransactions.size(); i++) {
        ScheduledTransactionDetail.validateJsonObject(jsonArrayscheduledTransactions.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScheduledTransactionsResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScheduledTransactionsResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScheduledTransactionsResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScheduledTransactionsResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<ScheduledTransactionsResponseData>() {
           @Override
           public void write(JsonWriter out, ScheduledTransactionsResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ScheduledTransactionsResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ScheduledTransactionsResponseData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScheduledTransactionsResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScheduledTransactionsResponseData
  * @throws IOException if the JSON string is invalid with respect to ScheduledTransactionsResponseData
  */
  public static ScheduledTransactionsResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduledTransactionsResponseData.class);
  }

 /**
  * Convert an instance of ScheduledTransactionsResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

