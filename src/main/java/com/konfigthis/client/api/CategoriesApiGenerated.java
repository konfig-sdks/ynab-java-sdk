/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.68.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CategoriesResponse;
import com.konfigthis.client.model.CategoryResponse;
import com.konfigthis.client.model.ErrorResponse;
import java.time.LocalDate;
import com.konfigthis.client.model.PatchCategoryWrapper;
import com.konfigthis.client.model.PatchMonthCategoryWrapper;
import com.konfigthis.client.model.SaveCategory;
import com.konfigthis.client.model.SaveCategoryResponse;
import com.konfigthis.client.model.SaveMonthCategory;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CategoriesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategoriesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CategoriesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getMonthCategoryByIdCall(String budgetId, LocalDate month, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/months/{month}/categories/{category_id}"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()))
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMonthCategoryByIdValidateBeforeCall(String budgetId, LocalDate month, String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling getMonthCategoryById(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling getMonthCategoryById(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getMonthCategoryById(Async)");
        }

        return getMonthCategoryByIdCall(budgetId, month, categoryId, _callback);

    }


    private ApiResponse<CategoryResponse> getMonthCategoryByIdWithHttpInfo(String budgetId, LocalDate month, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = getMonthCategoryByIdValidateBeforeCall(budgetId, month, categoryId, null);
        Type localVarReturnType = new TypeToken<CategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMonthCategoryByIdAsync(String budgetId, LocalDate month, String categoryId, final ApiCallback<CategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMonthCategoryByIdValidateBeforeCall(budgetId, month, categoryId, _callback);
        Type localVarReturnType = new TypeToken<CategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMonthCategoryByIdRequestBuilder {
        private final String budgetId;
        private final LocalDate month;
        private final String categoryId;

        private GetMonthCategoryByIdRequestBuilder(String budgetId, LocalDate month, String categoryId) {
            this.budgetId = budgetId;
            this.month = month;
            this.categoryId = categoryId;
        }

        /**
         * Build call for getMonthCategoryById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested month category </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMonthCategoryByIdCall(budgetId, month, categoryId, _callback);
        }


        /**
         * Execute getMonthCategoryById request
         * @return CategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested month category </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public CategoryResponse execute() throws ApiException {
            ApiResponse<CategoryResponse> localVarResp = getMonthCategoryByIdWithHttpInfo(budgetId, month, categoryId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMonthCategoryById request with HTTP info returned
         * @return ApiResponse&lt;CategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested month category </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CategoryResponse> executeWithHttpInfo() throws ApiException {
            return getMonthCategoryByIdWithHttpInfo(budgetId, month, categoryId);
        }

        /**
         * Execute getMonthCategoryById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested month category </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CategoryResponse> _callback) throws ApiException {
            return getMonthCategoryByIdAsync(budgetId, month, categoryId, _callback);
        }
    }

    /**
     * Single category for a specific budget month
     * Returns a single category for a specific budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
     * @param month The budget month in ISO format (e.g. 2016-12-01) (\&quot;current\&quot; can also be used to specify the current calendar month (UTC)) (required)
     * @param categoryId The id of the category (required)
     * @return GetMonthCategoryByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested month category </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public GetMonthCategoryByIdRequestBuilder getMonthCategoryById(String budgetId, LocalDate month, String categoryId) throws IllegalArgumentException {
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
            

        if (month == null) throw new IllegalArgumentException("\"month\" is required but got null");
        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new GetMonthCategoryByIdRequestBuilder(budgetId, month, categoryId);
    }
    private okhttp3.Call getSingleCategoryCall(String budgetId, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/categories/{category_id}"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()))
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleCategoryValidateBeforeCall(String budgetId, String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling getSingleCategory(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getSingleCategory(Async)");
        }

        return getSingleCategoryCall(budgetId, categoryId, _callback);

    }


    private ApiResponse<CategoryResponse> getSingleCategoryWithHttpInfo(String budgetId, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = getSingleCategoryValidateBeforeCall(budgetId, categoryId, null);
        Type localVarReturnType = new TypeToken<CategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleCategoryAsync(String budgetId, String categoryId, final ApiCallback<CategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleCategoryValidateBeforeCall(budgetId, categoryId, _callback);
        Type localVarReturnType = new TypeToken<CategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleCategoryRequestBuilder {
        private final String budgetId;
        private final String categoryId;

        private GetSingleCategoryRequestBuilder(String budgetId, String categoryId) {
            this.budgetId = budgetId;
            this.categoryId = categoryId;
        }

        /**
         * Build call for getSingleCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested category </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCategoryCall(budgetId, categoryId, _callback);
        }


        /**
         * Execute getSingleCategory request
         * @return CategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested category </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public CategoryResponse execute() throws ApiException {
            ApiResponse<CategoryResponse> localVarResp = getSingleCategoryWithHttpInfo(budgetId, categoryId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleCategory request with HTTP info returned
         * @return ApiResponse&lt;CategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested category </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CategoryResponse> executeWithHttpInfo() throws ApiException {
            return getSingleCategoryWithHttpInfo(budgetId, categoryId);
        }

        /**
         * Execute getSingleCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested category </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CategoryResponse> _callback) throws ApiException {
            return getSingleCategoryAsync(budgetId, categoryId, _callback);
        }
    }

    /**
     * Single category
     * Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
     * @param categoryId The id of the category (required)
     * @return GetSingleCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested category </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleCategoryRequestBuilder getSingleCategory(String budgetId, String categoryId) throws IllegalArgumentException {
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
            

        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new GetSingleCategoryRequestBuilder(budgetId, categoryId);
    }
    private okhttp3.Call listByBudgetIdCall(String budgetId, Long lastKnowledgeOfServer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/categories"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lastKnowledgeOfServer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_knowledge_of_server", lastKnowledgeOfServer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByBudgetIdValidateBeforeCall(String budgetId, Long lastKnowledgeOfServer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling listByBudgetId(Async)");
        }

        return listByBudgetIdCall(budgetId, lastKnowledgeOfServer, _callback);

    }


    private ApiResponse<CategoriesResponse> listByBudgetIdWithHttpInfo(String budgetId, Long lastKnowledgeOfServer) throws ApiException {
        okhttp3.Call localVarCall = listByBudgetIdValidateBeforeCall(budgetId, lastKnowledgeOfServer, null);
        Type localVarReturnType = new TypeToken<CategoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByBudgetIdAsync(String budgetId, Long lastKnowledgeOfServer, final ApiCallback<CategoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByBudgetIdValidateBeforeCall(budgetId, lastKnowledgeOfServer, _callback);
        Type localVarReturnType = new TypeToken<CategoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByBudgetIdRequestBuilder {
        private final String budgetId;
        private Long lastKnowledgeOfServer;

        private ListByBudgetIdRequestBuilder(String budgetId) {
            this.budgetId = budgetId;
        }

        /**
         * Set lastKnowledgeOfServer
         * @param lastKnowledgeOfServer The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included. (optional)
         * @return ListByBudgetIdRequestBuilder
         */
        public ListByBudgetIdRequestBuilder lastKnowledgeOfServer(Long lastKnowledgeOfServer) {
            this.lastKnowledgeOfServer = lastKnowledgeOfServer;
            return this;
        }
        
        /**
         * Build call for listByBudgetId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The categories grouped by category group </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByBudgetIdCall(budgetId, lastKnowledgeOfServer, _callback);
        }


        /**
         * Execute listByBudgetId request
         * @return CategoriesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The categories grouped by category group </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public CategoriesResponse execute() throws ApiException {
            ApiResponse<CategoriesResponse> localVarResp = listByBudgetIdWithHttpInfo(budgetId, lastKnowledgeOfServer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByBudgetId request with HTTP info returned
         * @return ApiResponse&lt;CategoriesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The categories grouped by category group </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CategoriesResponse> executeWithHttpInfo() throws ApiException {
            return listByBudgetIdWithHttpInfo(budgetId, lastKnowledgeOfServer);
        }

        /**
         * Execute listByBudgetId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The categories grouped by category group </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CategoriesResponse> _callback) throws ApiException {
            return listByBudgetIdAsync(budgetId, lastKnowledgeOfServer, _callback);
        }
    }

    /**
     * List categories
     * Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
     * @return ListByBudgetIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The categories grouped by category group </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ListByBudgetIdRequestBuilder listByBudgetId(String budgetId) throws IllegalArgumentException {
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
            

        return new ListByBudgetIdRequestBuilder(budgetId);
    }
    private okhttp3.Call updateCategoryByIdCall(String budgetId, String categoryId, PatchCategoryWrapper data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/categories/{category_id}"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()))
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCategoryByIdValidateBeforeCall(String budgetId, String categoryId, PatchCategoryWrapper data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling updateCategoryById(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling updateCategoryById(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling updateCategoryById(Async)");
        }

        return updateCategoryByIdCall(budgetId, categoryId, data, _callback);

    }


    private ApiResponse<SaveCategoryResponse> updateCategoryByIdWithHttpInfo(String budgetId, String categoryId, PatchCategoryWrapper data) throws ApiException {
        okhttp3.Call localVarCall = updateCategoryByIdValidateBeforeCall(budgetId, categoryId, data, null);
        Type localVarReturnType = new TypeToken<SaveCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCategoryByIdAsync(String budgetId, String categoryId, PatchCategoryWrapper data, final ApiCallback<SaveCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCategoryByIdValidateBeforeCall(budgetId, categoryId, data, _callback);
        Type localVarReturnType = new TypeToken<SaveCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCategoryByIdRequestBuilder {
        private final SaveCategory category;
        private final String budgetId;
        private final String categoryId;

        private UpdateCategoryByIdRequestBuilder(SaveCategory category, String budgetId, String categoryId) {
            this.category = category;
            this.budgetId = budgetId;
            this.categoryId = categoryId;
        }

        /**
         * Build call for updateCategoryById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The category was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PatchCategoryWrapper data = buildBodyParams();
            return updateCategoryByIdCall(budgetId, categoryId, data, _callback);
        }

        private PatchCategoryWrapper buildBodyParams() {
            PatchCategoryWrapper data = new PatchCategoryWrapper();
            data.category(this.category);
            return data;
        }

        /**
         * Execute updateCategoryById request
         * @return SaveCategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The category was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public SaveCategoryResponse execute() throws ApiException {
            PatchCategoryWrapper data = buildBodyParams();
            ApiResponse<SaveCategoryResponse> localVarResp = updateCategoryByIdWithHttpInfo(budgetId, categoryId, data);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCategoryById request with HTTP info returned
         * @return ApiResponse&lt;SaveCategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The category was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SaveCategoryResponse> executeWithHttpInfo() throws ApiException {
            PatchCategoryWrapper data = buildBodyParams();
            return updateCategoryByIdWithHttpInfo(budgetId, categoryId, data);
        }

        /**
         * Execute updateCategoryById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The category was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SaveCategoryResponse> _callback) throws ApiException {
            PatchCategoryWrapper data = buildBodyParams();
            return updateCategoryByIdAsync(budgetId, categoryId, data, _callback);
        }
    }

    /**
     * Update a category
     * Update a category
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
     * @param categoryId The id of the category (required)
     * @param data The category to update (required)
     * @return UpdateCategoryByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The category was successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCategoryByIdRequestBuilder updateCategoryById(SaveCategory category, String budgetId, String categoryId) throws IllegalArgumentException {
        if (category == null) throw new IllegalArgumentException("\"category\" is required but got null");
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
            

        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new UpdateCategoryByIdRequestBuilder(category, budgetId, categoryId);
    }
    private okhttp3.Call updateMonthCategoryCall(String budgetId, LocalDate month, String categoryId, PatchMonthCategoryWrapper data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/months/{month}/categories/{category_id}"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()))
            .replace("{" + "month" + "}", localVarApiClient.escapeString(month.toString()))
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMonthCategoryValidateBeforeCall(String budgetId, LocalDate month, String categoryId, PatchMonthCategoryWrapper data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling updateMonthCategory(Async)");
        }

        // verify the required parameter 'month' is set
        if (month == null) {
            throw new ApiException("Missing the required parameter 'month' when calling updateMonthCategory(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling updateMonthCategory(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling updateMonthCategory(Async)");
        }

        return updateMonthCategoryCall(budgetId, month, categoryId, data, _callback);

    }


    private ApiResponse<SaveCategoryResponse> updateMonthCategoryWithHttpInfo(String budgetId, LocalDate month, String categoryId, PatchMonthCategoryWrapper data) throws ApiException {
        okhttp3.Call localVarCall = updateMonthCategoryValidateBeforeCall(budgetId, month, categoryId, data, null);
        Type localVarReturnType = new TypeToken<SaveCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMonthCategoryAsync(String budgetId, LocalDate month, String categoryId, PatchMonthCategoryWrapper data, final ApiCallback<SaveCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMonthCategoryValidateBeforeCall(budgetId, month, categoryId, data, _callback);
        Type localVarReturnType = new TypeToken<SaveCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMonthCategoryRequestBuilder {
        private final SaveMonthCategory category;
        private final String budgetId;
        private final LocalDate month;
        private final String categoryId;

        private UpdateMonthCategoryRequestBuilder(SaveMonthCategory category, String budgetId, LocalDate month, String categoryId) {
            this.category = category;
            this.budgetId = budgetId;
            this.month = month;
            this.categoryId = categoryId;
        }

        /**
         * Build call for updateMonthCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The month category was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PatchMonthCategoryWrapper data = buildBodyParams();
            return updateMonthCategoryCall(budgetId, month, categoryId, data, _callback);
        }

        private PatchMonthCategoryWrapper buildBodyParams() {
            PatchMonthCategoryWrapper data = new PatchMonthCategoryWrapper();
            data.category(this.category);
            return data;
        }

        /**
         * Execute updateMonthCategory request
         * @return SaveCategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The month category was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public SaveCategoryResponse execute() throws ApiException {
            PatchMonthCategoryWrapper data = buildBodyParams();
            ApiResponse<SaveCategoryResponse> localVarResp = updateMonthCategoryWithHttpInfo(budgetId, month, categoryId, data);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMonthCategory request with HTTP info returned
         * @return ApiResponse&lt;SaveCategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The month category was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SaveCategoryResponse> executeWithHttpInfo() throws ApiException {
            PatchMonthCategoryWrapper data = buildBodyParams();
            return updateMonthCategoryWithHttpInfo(budgetId, month, categoryId, data);
        }

        /**
         * Execute updateMonthCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The month category was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SaveCategoryResponse> _callback) throws ApiException {
            PatchMonthCategoryWrapper data = buildBodyParams();
            return updateMonthCategoryAsync(budgetId, month, categoryId, data, _callback);
        }
    }

    /**
     * Update a category for a specific month
     * Update a category for a specific month.  Only &#x60;budgeted&#x60; amount can be updated.
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
     * @param month The budget month in ISO format (e.g. 2016-12-01) (\&quot;current\&quot; can also be used to specify the current calendar month (UTC)) (required)
     * @param categoryId The id of the category (required)
     * @param data The category to update.  Only &#x60;budgeted&#x60; amount can be updated and any other fields specified will be ignored. (required)
     * @return UpdateMonthCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The month category was successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMonthCategoryRequestBuilder updateMonthCategory(SaveMonthCategory category, String budgetId, LocalDate month, String categoryId) throws IllegalArgumentException {
        if (category == null) throw new IllegalArgumentException("\"category\" is required but got null");
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
            

        if (month == null) throw new IllegalArgumentException("\"month\" is required but got null");
        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new UpdateMonthCategoryRequestBuilder(category, budgetId, month, categoryId);
    }
}
