/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.68.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BudgetDetailResponse;
import com.konfigthis.client.model.BudgetSettingsResponse;
import com.konfigthis.client.model.BudgetSummaryResponse;
import com.konfigthis.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BudgetsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BudgetsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BudgetsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getBudgetCall(String budgetId, Long lastKnowledgeOfServer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lastKnowledgeOfServer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_knowledge_of_server", lastKnowledgeOfServer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBudgetValidateBeforeCall(String budgetId, Long lastKnowledgeOfServer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling getBudget(Async)");
        }

        return getBudgetCall(budgetId, lastKnowledgeOfServer, _callback);

    }


    private ApiResponse<BudgetDetailResponse> getBudgetWithHttpInfo(String budgetId, Long lastKnowledgeOfServer) throws ApiException {
        okhttp3.Call localVarCall = getBudgetValidateBeforeCall(budgetId, lastKnowledgeOfServer, null);
        Type localVarReturnType = new TypeToken<BudgetDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBudgetAsync(String budgetId, Long lastKnowledgeOfServer, final ApiCallback<BudgetDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBudgetValidateBeforeCall(budgetId, lastKnowledgeOfServer, _callback);
        Type localVarReturnType = new TypeToken<BudgetDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBudgetRequestBuilder {
        private final String budgetId;
        private Long lastKnowledgeOfServer;

        private GetBudgetRequestBuilder(String budgetId) {
            this.budgetId = budgetId;
        }

        /**
         * Set lastKnowledgeOfServer
         * @param lastKnowledgeOfServer The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included. (optional)
         * @return GetBudgetRequestBuilder
         */
        public GetBudgetRequestBuilder lastKnowledgeOfServer(Long lastKnowledgeOfServer) {
            this.lastKnowledgeOfServer = lastKnowledgeOfServer;
            return this;
        }
        
        /**
         * Build call for getBudget
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested budget </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBudgetCall(budgetId, lastKnowledgeOfServer, _callback);
        }


        /**
         * Execute getBudget request
         * @return BudgetDetailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested budget </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public BudgetDetailResponse execute() throws ApiException {
            ApiResponse<BudgetDetailResponse> localVarResp = getBudgetWithHttpInfo(budgetId, lastKnowledgeOfServer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBudget request with HTTP info returned
         * @return ApiResponse&lt;BudgetDetailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested budget </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BudgetDetailResponse> executeWithHttpInfo() throws ApiException {
            return getBudgetWithHttpInfo(budgetId, lastKnowledgeOfServer);
        }

        /**
         * Execute getBudget request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested budget </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BudgetDetailResponse> _callback) throws ApiException {
            return getBudgetAsync(budgetId, lastKnowledgeOfServer, _callback);
        }
    }

    /**
     * Single budget
     * Returns a single budget with all related entities.  This resource is effectively a full budget export.
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
     * @return GetBudgetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested budget </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public GetBudgetRequestBuilder getBudget(String budgetId) throws IllegalArgumentException {
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
            

        return new GetBudgetRequestBuilder(budgetId);
    }
    private okhttp3.Call getSettingsCall(String budgetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/settings"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingsValidateBeforeCall(String budgetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling getSettings(Async)");
        }

        return getSettingsCall(budgetId, _callback);

    }


    private ApiResponse<BudgetSettingsResponse> getSettingsWithHttpInfo(String budgetId) throws ApiException {
        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(budgetId, null);
        Type localVarReturnType = new TypeToken<BudgetSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSettingsAsync(String budgetId, final ApiCallback<BudgetSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(budgetId, _callback);
        Type localVarReturnType = new TypeToken<BudgetSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSettingsRequestBuilder {
        private final String budgetId;

        private GetSettingsRequestBuilder(String budgetId) {
            this.budgetId = budgetId;
        }

        /**
         * Build call for getSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested budget settings </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSettingsCall(budgetId, _callback);
        }


        /**
         * Execute getSettings request
         * @return BudgetSettingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested budget settings </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public BudgetSettingsResponse execute() throws ApiException {
            ApiResponse<BudgetSettingsResponse> localVarResp = getSettingsWithHttpInfo(budgetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSettings request with HTTP info returned
         * @return ApiResponse&lt;BudgetSettingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested budget settings </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BudgetSettingsResponse> executeWithHttpInfo() throws ApiException {
            return getSettingsWithHttpInfo(budgetId);
        }

        /**
         * Execute getSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested budget settings </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BudgetSettingsResponse> _callback) throws ApiException {
            return getSettingsAsync(budgetId, _callback);
        }
    }

    /**
     * Budget Settings
     * Returns settings for a budget
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
     * @return GetSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested budget settings </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public GetSettingsRequestBuilder getSettings(String budgetId) throws IllegalArgumentException {
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
            

        return new GetSettingsRequestBuilder(budgetId);
    }
    private okhttp3.Call listSummaryCall(Boolean includeAccounts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeAccounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_accounts", includeAccounts));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSummaryValidateBeforeCall(Boolean includeAccounts, final ApiCallback _callback) throws ApiException {
        return listSummaryCall(includeAccounts, _callback);

    }


    private ApiResponse<BudgetSummaryResponse> listSummaryWithHttpInfo(Boolean includeAccounts) throws ApiException {
        okhttp3.Call localVarCall = listSummaryValidateBeforeCall(includeAccounts, null);
        Type localVarReturnType = new TypeToken<BudgetSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSummaryAsync(Boolean includeAccounts, final ApiCallback<BudgetSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSummaryValidateBeforeCall(includeAccounts, _callback);
        Type localVarReturnType = new TypeToken<BudgetSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSummaryRequestBuilder {
        private Boolean includeAccounts;

        private ListSummaryRequestBuilder() {
        }

        /**
         * Set includeAccounts
         * @param includeAccounts Whether to include the list of budget accounts (optional)
         * @return ListSummaryRequestBuilder
         */
        public ListSummaryRequestBuilder includeAccounts(Boolean includeAccounts) {
            this.includeAccounts = includeAccounts;
            return this;
        }
        
        /**
         * Build call for listSummary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of budgets </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSummaryCall(includeAccounts, _callback);
        }


        /**
         * Execute listSummary request
         * @return BudgetSummaryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of budgets </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public BudgetSummaryResponse execute() throws ApiException {
            ApiResponse<BudgetSummaryResponse> localVarResp = listSummaryWithHttpInfo(includeAccounts);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSummary request with HTTP info returned
         * @return ApiResponse&lt;BudgetSummaryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of budgets </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BudgetSummaryResponse> executeWithHttpInfo() throws ApiException {
            return listSummaryWithHttpInfo(includeAccounts);
        }

        /**
         * Execute listSummary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of budgets </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BudgetSummaryResponse> _callback) throws ApiException {
            return listSummaryAsync(includeAccounts, _callback);
        }
    }

    /**
     * List budgets
     * Returns budgets list with summary information
     * @return ListSummaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of budgets </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ListSummaryRequestBuilder listSummary() throws IllegalArgumentException {
        return new ListSummaryRequestBuilder();
    }
}
