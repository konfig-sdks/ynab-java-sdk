/*
 * YNAB API Endpoints
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.ynab.com
 *
 * The version of the OpenAPI document: 1.68.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ErrorResponse;
import com.konfigthis.client.model.ExistingTransaction;
import com.konfigthis.client.model.HybridTransactionsResponse;
import java.time.LocalDate;
import com.konfigthis.client.model.NewTransaction;
import com.konfigthis.client.model.PatchTransactionsWrapper;
import com.konfigthis.client.model.PostTransactionsWrapper;
import com.konfigthis.client.model.PutTransactionWrapper;
import com.konfigthis.client.model.SaveTransactionWithIdOrImportId;
import com.konfigthis.client.model.SaveTransactionsResponse;
import com.konfigthis.client.model.TransactionResponse;
import com.konfigthis.client.model.TransactionsImportResponse;
import com.konfigthis.client.model.TransactionsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TransactionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createSingleOrMultipleCall(String budgetId, PostTransactionsWrapper data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/transactions"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSingleOrMultipleValidateBeforeCall(String budgetId, PostTransactionsWrapper data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling createSingleOrMultiple(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling createSingleOrMultiple(Async)");
        }

        return createSingleOrMultipleCall(budgetId, data, _callback);

    }


    private ApiResponse<SaveTransactionsResponse> createSingleOrMultipleWithHttpInfo(String budgetId, PostTransactionsWrapper data) throws ApiException {
        okhttp3.Call localVarCall = createSingleOrMultipleValidateBeforeCall(budgetId, data, null);
        Type localVarReturnType = new TypeToken<SaveTransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSingleOrMultipleAsync(String budgetId, PostTransactionsWrapper data, final ApiCallback<SaveTransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSingleOrMultipleValidateBeforeCall(budgetId, data, _callback);
        Type localVarReturnType = new TypeToken<SaveTransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSingleOrMultipleRequestBuilder {
        private final String budgetId;
        private NewTransaction transaction;
        private List<NewTransaction> transactions;

        private CreateSingleOrMultipleRequestBuilder(String budgetId) {
            this.budgetId = budgetId;
        }

        /**
         * Set transaction
         * @param transaction  (optional)
         * @return CreateSingleOrMultipleRequestBuilder
         */
        public CreateSingleOrMultipleRequestBuilder transaction(NewTransaction transaction) {
            this.transaction = transaction;
            return this;
        }
        
        /**
         * Set transactions
         * @param transactions  (optional)
         * @return CreateSingleOrMultipleRequestBuilder
         */
        public CreateSingleOrMultipleRequestBuilder transactions(List<NewTransaction> transactions) {
            this.transactions = transactions;
            return this;
        }
        
        /**
         * Build call for createSingleOrMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The transaction or transactions were successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostTransactionsWrapper data = buildBodyParams();
            return createSingleOrMultipleCall(budgetId, data, _callback);
        }

        private PostTransactionsWrapper buildBodyParams() {
            PostTransactionsWrapper data = new PostTransactionsWrapper();
            data.transaction(this.transaction);
            data.transactions(this.transactions);
            return data;
        }

        /**
         * Execute createSingleOrMultiple request
         * @return SaveTransactionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The transaction or transactions were successfully created </td><td>  -  </td></tr>
         </table>
         */
        public SaveTransactionsResponse execute() throws ApiException {
            PostTransactionsWrapper data = buildBodyParams();
            ApiResponse<SaveTransactionsResponse> localVarResp = createSingleOrMultipleWithHttpInfo(budgetId, data);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSingleOrMultiple request with HTTP info returned
         * @return ApiResponse&lt;SaveTransactionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The transaction or transactions were successfully created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SaveTransactionsResponse> executeWithHttpInfo() throws ApiException {
            PostTransactionsWrapper data = buildBodyParams();
            return createSingleOrMultipleWithHttpInfo(budgetId, data);
        }

        /**
         * Execute createSingleOrMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> The transaction or transactions were successfully created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SaveTransactionsResponse> _callback) throws ApiException {
            PostTransactionsWrapper data = buildBodyParams();
            return createSingleOrMultipleAsync(budgetId, data, _callback);
        }
    }

    /**
     * Create a single transaction or multiple transactions
     * Creates a single transaction or multiple transactions.  If you provide a body containing a &#x60;transaction&#x60; object, a single transaction will be created and if you provide a body containing a &#x60;transactions&#x60; array, multiple transactions will be created.  Scheduled transactions cannot be created on this endpoint.
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
     * @param data The transaction or transactions to create.  To create a single transaction you can specify a value for the &#x60;transaction&#x60; object and to create multiple transactions you can specify an array of &#x60;transactions&#x60;.  It is expected that you will only provide a value for one of these objects. (required)
     * @return CreateSingleOrMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The transaction or transactions were successfully created </td><td>  -  </td></tr>
     </table>
     */
    public CreateSingleOrMultipleRequestBuilder createSingleOrMultiple(String budgetId) throws IllegalArgumentException {
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
            

        return new CreateSingleOrMultipleRequestBuilder(budgetId);
    }
    private okhttp3.Call deleteExistingTransactionCall(String budgetId, String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/transactions/{transaction_id}"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()))
            .replace("{" + "transaction_id" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExistingTransactionValidateBeforeCall(String budgetId, String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling deleteExistingTransaction(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling deleteExistingTransaction(Async)");
        }

        return deleteExistingTransactionCall(budgetId, transactionId, _callback);

    }


    private ApiResponse<TransactionResponse> deleteExistingTransactionWithHttpInfo(String budgetId, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = deleteExistingTransactionValidateBeforeCall(budgetId, transactionId, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteExistingTransactionAsync(String budgetId, String transactionId, final ApiCallback<TransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExistingTransactionValidateBeforeCall(budgetId, transactionId, _callback);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteExistingTransactionRequestBuilder {
        private final String budgetId;
        private final String transactionId;

        private DeleteExistingTransactionRequestBuilder(String budgetId, String transactionId) {
            this.budgetId = budgetId;
            this.transactionId = transactionId;
        }

        /**
         * Build call for deleteExistingTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteExistingTransactionCall(budgetId, transactionId, _callback);
        }


        /**
         * Execute deleteExistingTransaction request
         * @return TransactionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public TransactionResponse execute() throws ApiException {
            ApiResponse<TransactionResponse> localVarResp = deleteExistingTransactionWithHttpInfo(budgetId, transactionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteExistingTransaction request with HTTP info returned
         * @return ApiResponse&lt;TransactionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionResponse> executeWithHttpInfo() throws ApiException {
            return deleteExistingTransactionWithHttpInfo(budgetId, transactionId);
        }

        /**
         * Execute deleteExistingTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction was successfully deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionResponse> _callback) throws ApiException {
            return deleteExistingTransactionAsync(budgetId, transactionId, _callback);
        }
    }

    /**
     * Deletes an existing transaction
     * Deletes a transaction
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
     * @param transactionId The id of the transaction (required)
     * @return DeleteExistingTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transaction was successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteExistingTransactionRequestBuilder deleteExistingTransaction(String budgetId, String transactionId) throws IllegalArgumentException {
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
            

        if (transactionId == null) throw new IllegalArgumentException("\"transactionId\" is required but got null");
            

        return new DeleteExistingTransactionRequestBuilder(budgetId, transactionId);
    }
    private okhttp3.Call getSingleTransactionCall(String budgetId, String transactionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/transactions/{transaction_id}"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()))
            .replace("{" + "transaction_id" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleTransactionValidateBeforeCall(String budgetId, String transactionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling getSingleTransaction(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling getSingleTransaction(Async)");
        }

        return getSingleTransactionCall(budgetId, transactionId, _callback);

    }


    private ApiResponse<TransactionResponse> getSingleTransactionWithHttpInfo(String budgetId, String transactionId) throws ApiException {
        okhttp3.Call localVarCall = getSingleTransactionValidateBeforeCall(budgetId, transactionId, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleTransactionAsync(String budgetId, String transactionId, final ApiCallback<TransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleTransactionValidateBeforeCall(budgetId, transactionId, _callback);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleTransactionRequestBuilder {
        private final String budgetId;
        private final String transactionId;

        private GetSingleTransactionRequestBuilder(String budgetId, String transactionId) {
            this.budgetId = budgetId;
            this.transactionId = transactionId;
        }

        /**
         * Build call for getSingleTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested transaction </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleTransactionCall(budgetId, transactionId, _callback);
        }


        /**
         * Execute getSingleTransaction request
         * @return TransactionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested transaction </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public TransactionResponse execute() throws ApiException {
            ApiResponse<TransactionResponse> localVarResp = getSingleTransactionWithHttpInfo(budgetId, transactionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleTransaction request with HTTP info returned
         * @return ApiResponse&lt;TransactionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested transaction </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionResponse> executeWithHttpInfo() throws ApiException {
            return getSingleTransactionWithHttpInfo(budgetId, transactionId);
        }

        /**
         * Execute getSingleTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested transaction </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionResponse> _callback) throws ApiException {
            return getSingleTransactionAsync(budgetId, transactionId, _callback);
        }
    }

    /**
     * Single transaction
     * Returns a single transaction
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
     * @param transactionId The id of the transaction (required)
     * @return GetSingleTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested transaction </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleTransactionRequestBuilder getSingleTransaction(String budgetId, String transactionId) throws IllegalArgumentException {
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
            

        if (transactionId == null) throw new IllegalArgumentException("\"transactionId\" is required but got null");
            

        return new GetSingleTransactionRequestBuilder(budgetId, transactionId);
    }
    private okhttp3.Call importLinkedAccountsCall(String budgetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/transactions/import"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importLinkedAccountsValidateBeforeCall(String budgetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling importLinkedAccounts(Async)");
        }

        return importLinkedAccountsCall(budgetId, _callback);

    }


    private ApiResponse<TransactionsImportResponse> importLinkedAccountsWithHttpInfo(String budgetId) throws ApiException {
        okhttp3.Call localVarCall = importLinkedAccountsValidateBeforeCall(budgetId, null);
        Type localVarReturnType = new TypeToken<TransactionsImportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call importLinkedAccountsAsync(String budgetId, final ApiCallback<TransactionsImportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = importLinkedAccountsValidateBeforeCall(budgetId, _callback);
        Type localVarReturnType = new TypeToken<TransactionsImportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ImportLinkedAccountsRequestBuilder {
        private final String budgetId;

        private ImportLinkedAccountsRequestBuilder(String budgetId) {
            this.budgetId = budgetId;
        }

        /**
         * Build call for importLinkedAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was successful but there were no transactions to import </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> One or more transactions were imported successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return importLinkedAccountsCall(budgetId, _callback);
        }


        /**
         * Execute importLinkedAccounts request
         * @return TransactionsImportResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was successful but there were no transactions to import </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> One or more transactions were imported successfully </td><td>  -  </td></tr>
         </table>
         */
        public TransactionsImportResponse execute() throws ApiException {
            ApiResponse<TransactionsImportResponse> localVarResp = importLinkedAccountsWithHttpInfo(budgetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute importLinkedAccounts request with HTTP info returned
         * @return ApiResponse&lt;TransactionsImportResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was successful but there were no transactions to import </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> One or more transactions were imported successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionsImportResponse> executeWithHttpInfo() throws ApiException {
            return importLinkedAccountsWithHttpInfo(budgetId);
        }

        /**
         * Execute importLinkedAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was successful but there were no transactions to import </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> One or more transactions were imported successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionsImportResponse> _callback) throws ApiException {
            return importLinkedAccountsAsync(budgetId, _callback);
        }
    }

    /**
     * Import transactions
     * Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a specified financial institution and this endpoint initiates that import.  Sending a request to this endpoint is the equivalent of clicking \&quot;Import\&quot; on each account in the web application or tapping the \&quot;New Transactions\&quot; banner in the mobile applications.  The response for this endpoint contains the transaction ids that have been imported.
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
     * @return ImportLinkedAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful but there were no transactions to import </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> One or more transactions were imported successfully </td><td>  -  </td></tr>
     </table>
     */
    public ImportLinkedAccountsRequestBuilder importLinkedAccounts(String budgetId) throws IllegalArgumentException {
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
            

        return new ImportLinkedAccountsRequestBuilder(budgetId);
    }
    private okhttp3.Call listByAccountCall(String budgetId, String accountId, LocalDate sinceDate, String type, Long lastKnowledgeOfServer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/accounts/{account_id}/transactions"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()))
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sinceDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_date", sinceDate));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (lastKnowledgeOfServer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_knowledge_of_server", lastKnowledgeOfServer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByAccountValidateBeforeCall(String budgetId, String accountId, LocalDate sinceDate, String type, Long lastKnowledgeOfServer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling listByAccount(Async)");
        }

        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listByAccount(Async)");
        }

        return listByAccountCall(budgetId, accountId, sinceDate, type, lastKnowledgeOfServer, _callback);

    }


    private ApiResponse<TransactionsResponse> listByAccountWithHttpInfo(String budgetId, String accountId, LocalDate sinceDate, String type, Long lastKnowledgeOfServer) throws ApiException {
        okhttp3.Call localVarCall = listByAccountValidateBeforeCall(budgetId, accountId, sinceDate, type, lastKnowledgeOfServer, null);
        Type localVarReturnType = new TypeToken<TransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByAccountAsync(String budgetId, String accountId, LocalDate sinceDate, String type, Long lastKnowledgeOfServer, final ApiCallback<TransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByAccountValidateBeforeCall(budgetId, accountId, sinceDate, type, lastKnowledgeOfServer, _callback);
        Type localVarReturnType = new TypeToken<TransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByAccountRequestBuilder {
        private final String budgetId;
        private final String accountId;
        private LocalDate sinceDate;
        private String type;
        private Long lastKnowledgeOfServer;

        private ListByAccountRequestBuilder(String budgetId, String accountId) {
            this.budgetId = budgetId;
            this.accountId = accountId;
        }

        /**
         * Set sinceDate
         * @param sinceDate If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30). (optional)
         * @return ListByAccountRequestBuilder
         */
        public ListByAccountRequestBuilder sinceDate(LocalDate sinceDate) {
            this.sinceDate = sinceDate;
            return this;
        }
        
        /**
         * Set type
         * @param type If specified, only transactions of the specified type will be included. \&quot;uncategorized\&quot; and \&quot;unapproved\&quot; are currently supported. (optional)
         * @return ListByAccountRequestBuilder
         */
        public ListByAccountRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set lastKnowledgeOfServer
         * @param lastKnowledgeOfServer The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included. (optional)
         * @return ListByAccountRequestBuilder
         */
        public ListByAccountRequestBuilder lastKnowledgeOfServer(Long lastKnowledgeOfServer) {
            this.lastKnowledgeOfServer = lastKnowledgeOfServer;
            return this;
        }
        
        /**
         * Build call for listByAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByAccountCall(budgetId, accountId, sinceDate, type, lastKnowledgeOfServer, _callback);
        }


        /**
         * Execute listByAccount request
         * @return TransactionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public TransactionsResponse execute() throws ApiException {
            ApiResponse<TransactionsResponse> localVarResp = listByAccountWithHttpInfo(budgetId, accountId, sinceDate, type, lastKnowledgeOfServer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByAccount request with HTTP info returned
         * @return ApiResponse&lt;TransactionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionsResponse> executeWithHttpInfo() throws ApiException {
            return listByAccountWithHttpInfo(budgetId, accountId, sinceDate, type, lastKnowledgeOfServer);
        }

        /**
         * Execute listByAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionsResponse> _callback) throws ApiException {
            return listByAccountAsync(budgetId, accountId, sinceDate, type, lastKnowledgeOfServer, _callback);
        }
    }

    /**
     * List account transactions
     * Returns all transactions for a specified account
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
     * @param accountId The id of the account (required)
     * @return ListByAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ListByAccountRequestBuilder listByAccount(String budgetId, String accountId) throws IllegalArgumentException {
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
            

        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new ListByAccountRequestBuilder(budgetId, accountId);
    }
    private okhttp3.Call listByCategoryCall(String budgetId, String categoryId, LocalDate sinceDate, String type, Long lastKnowledgeOfServer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/categories/{category_id}/transactions"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()))
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sinceDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_date", sinceDate));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (lastKnowledgeOfServer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_knowledge_of_server", lastKnowledgeOfServer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByCategoryValidateBeforeCall(String budgetId, String categoryId, LocalDate sinceDate, String type, Long lastKnowledgeOfServer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling listByCategory(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling listByCategory(Async)");
        }

        return listByCategoryCall(budgetId, categoryId, sinceDate, type, lastKnowledgeOfServer, _callback);

    }


    private ApiResponse<HybridTransactionsResponse> listByCategoryWithHttpInfo(String budgetId, String categoryId, LocalDate sinceDate, String type, Long lastKnowledgeOfServer) throws ApiException {
        okhttp3.Call localVarCall = listByCategoryValidateBeforeCall(budgetId, categoryId, sinceDate, type, lastKnowledgeOfServer, null);
        Type localVarReturnType = new TypeToken<HybridTransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByCategoryAsync(String budgetId, String categoryId, LocalDate sinceDate, String type, Long lastKnowledgeOfServer, final ApiCallback<HybridTransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByCategoryValidateBeforeCall(budgetId, categoryId, sinceDate, type, lastKnowledgeOfServer, _callback);
        Type localVarReturnType = new TypeToken<HybridTransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByCategoryRequestBuilder {
        private final String budgetId;
        private final String categoryId;
        private LocalDate sinceDate;
        private String type;
        private Long lastKnowledgeOfServer;

        private ListByCategoryRequestBuilder(String budgetId, String categoryId) {
            this.budgetId = budgetId;
            this.categoryId = categoryId;
        }

        /**
         * Set sinceDate
         * @param sinceDate If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30). (optional)
         * @return ListByCategoryRequestBuilder
         */
        public ListByCategoryRequestBuilder sinceDate(LocalDate sinceDate) {
            this.sinceDate = sinceDate;
            return this;
        }
        
        /**
         * Set type
         * @param type If specified, only transactions of the specified type will be included. \&quot;uncategorized\&quot; and \&quot;unapproved\&quot; are currently supported. (optional)
         * @return ListByCategoryRequestBuilder
         */
        public ListByCategoryRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set lastKnowledgeOfServer
         * @param lastKnowledgeOfServer The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included. (optional)
         * @return ListByCategoryRequestBuilder
         */
        public ListByCategoryRequestBuilder lastKnowledgeOfServer(Long lastKnowledgeOfServer) {
            this.lastKnowledgeOfServer = lastKnowledgeOfServer;
            return this;
        }
        
        /**
         * Build call for listByCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByCategoryCall(budgetId, categoryId, sinceDate, type, lastKnowledgeOfServer, _callback);
        }


        /**
         * Execute listByCategory request
         * @return HybridTransactionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public HybridTransactionsResponse execute() throws ApiException {
            ApiResponse<HybridTransactionsResponse> localVarResp = listByCategoryWithHttpInfo(budgetId, categoryId, sinceDate, type, lastKnowledgeOfServer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByCategory request with HTTP info returned
         * @return ApiResponse&lt;HybridTransactionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HybridTransactionsResponse> executeWithHttpInfo() throws ApiException {
            return listByCategoryWithHttpInfo(budgetId, categoryId, sinceDate, type, lastKnowledgeOfServer);
        }

        /**
         * Execute listByCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HybridTransactionsResponse> _callback) throws ApiException {
            return listByCategoryAsync(budgetId, categoryId, sinceDate, type, lastKnowledgeOfServer, _callback);
        }
    }

    /**
     * List category transactions
     * Returns all transactions for a specified category
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
     * @param categoryId The id of the category (required)
     * @return ListByCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ListByCategoryRequestBuilder listByCategory(String budgetId, String categoryId) throws IllegalArgumentException {
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
            

        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new ListByCategoryRequestBuilder(budgetId, categoryId);
    }
    private okhttp3.Call listByPayeeCall(String budgetId, String payeeId, LocalDate sinceDate, String type, Long lastKnowledgeOfServer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/payees/{payee_id}/transactions"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()))
            .replace("{" + "payee_id" + "}", localVarApiClient.escapeString(payeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sinceDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_date", sinceDate));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (lastKnowledgeOfServer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_knowledge_of_server", lastKnowledgeOfServer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByPayeeValidateBeforeCall(String budgetId, String payeeId, LocalDate sinceDate, String type, Long lastKnowledgeOfServer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling listByPayee(Async)");
        }

        // verify the required parameter 'payeeId' is set
        if (payeeId == null) {
            throw new ApiException("Missing the required parameter 'payeeId' when calling listByPayee(Async)");
        }

        return listByPayeeCall(budgetId, payeeId, sinceDate, type, lastKnowledgeOfServer, _callback);

    }


    private ApiResponse<HybridTransactionsResponse> listByPayeeWithHttpInfo(String budgetId, String payeeId, LocalDate sinceDate, String type, Long lastKnowledgeOfServer) throws ApiException {
        okhttp3.Call localVarCall = listByPayeeValidateBeforeCall(budgetId, payeeId, sinceDate, type, lastKnowledgeOfServer, null);
        Type localVarReturnType = new TypeToken<HybridTransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByPayeeAsync(String budgetId, String payeeId, LocalDate sinceDate, String type, Long lastKnowledgeOfServer, final ApiCallback<HybridTransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByPayeeValidateBeforeCall(budgetId, payeeId, sinceDate, type, lastKnowledgeOfServer, _callback);
        Type localVarReturnType = new TypeToken<HybridTransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByPayeeRequestBuilder {
        private final String budgetId;
        private final String payeeId;
        private LocalDate sinceDate;
        private String type;
        private Long lastKnowledgeOfServer;

        private ListByPayeeRequestBuilder(String budgetId, String payeeId) {
            this.budgetId = budgetId;
            this.payeeId = payeeId;
        }

        /**
         * Set sinceDate
         * @param sinceDate If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30). (optional)
         * @return ListByPayeeRequestBuilder
         */
        public ListByPayeeRequestBuilder sinceDate(LocalDate sinceDate) {
            this.sinceDate = sinceDate;
            return this;
        }
        
        /**
         * Set type
         * @param type If specified, only transactions of the specified type will be included. \&quot;uncategorized\&quot; and \&quot;unapproved\&quot; are currently supported. (optional)
         * @return ListByPayeeRequestBuilder
         */
        public ListByPayeeRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set lastKnowledgeOfServer
         * @param lastKnowledgeOfServer The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included. (optional)
         * @return ListByPayeeRequestBuilder
         */
        public ListByPayeeRequestBuilder lastKnowledgeOfServer(Long lastKnowledgeOfServer) {
            this.lastKnowledgeOfServer = lastKnowledgeOfServer;
            return this;
        }
        
        /**
         * Build call for listByPayee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByPayeeCall(budgetId, payeeId, sinceDate, type, lastKnowledgeOfServer, _callback);
        }


        /**
         * Execute listByPayee request
         * @return HybridTransactionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public HybridTransactionsResponse execute() throws ApiException {
            ApiResponse<HybridTransactionsResponse> localVarResp = listByPayeeWithHttpInfo(budgetId, payeeId, sinceDate, type, lastKnowledgeOfServer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByPayee request with HTTP info returned
         * @return ApiResponse&lt;HybridTransactionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HybridTransactionsResponse> executeWithHttpInfo() throws ApiException {
            return listByPayeeWithHttpInfo(budgetId, payeeId, sinceDate, type, lastKnowledgeOfServer);
        }

        /**
         * Execute listByPayee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HybridTransactionsResponse> _callback) throws ApiException {
            return listByPayeeAsync(budgetId, payeeId, sinceDate, type, lastKnowledgeOfServer, _callback);
        }
    }

    /**
     * List payee transactions
     * Returns all transactions for a specified payee
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
     * @param payeeId The id of the payee (required)
     * @return ListByPayeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ListByPayeeRequestBuilder listByPayee(String budgetId, String payeeId) throws IllegalArgumentException {
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
            

        if (payeeId == null) throw new IllegalArgumentException("\"payeeId\" is required but got null");
            

        return new ListByPayeeRequestBuilder(budgetId, payeeId);
    }
    private okhttp3.Call listTransactionsCall(String budgetId, LocalDate sinceDate, String type, Long lastKnowledgeOfServer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/transactions"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sinceDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since_date", sinceDate));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (lastKnowledgeOfServer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_knowledge_of_server", lastKnowledgeOfServer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTransactionsValidateBeforeCall(String budgetId, LocalDate sinceDate, String type, Long lastKnowledgeOfServer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling listTransactions(Async)");
        }

        return listTransactionsCall(budgetId, sinceDate, type, lastKnowledgeOfServer, _callback);

    }


    private ApiResponse<TransactionsResponse> listTransactionsWithHttpInfo(String budgetId, LocalDate sinceDate, String type, Long lastKnowledgeOfServer) throws ApiException {
        okhttp3.Call localVarCall = listTransactionsValidateBeforeCall(budgetId, sinceDate, type, lastKnowledgeOfServer, null);
        Type localVarReturnType = new TypeToken<TransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTransactionsAsync(String budgetId, LocalDate sinceDate, String type, Long lastKnowledgeOfServer, final ApiCallback<TransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTransactionsValidateBeforeCall(budgetId, sinceDate, type, lastKnowledgeOfServer, _callback);
        Type localVarReturnType = new TypeToken<TransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTransactionsRequestBuilder {
        private final String budgetId;
        private LocalDate sinceDate;
        private String type;
        private Long lastKnowledgeOfServer;

        private ListTransactionsRequestBuilder(String budgetId) {
            this.budgetId = budgetId;
        }

        /**
         * Set sinceDate
         * @param sinceDate If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30). (optional)
         * @return ListTransactionsRequestBuilder
         */
        public ListTransactionsRequestBuilder sinceDate(LocalDate sinceDate) {
            this.sinceDate = sinceDate;
            return this;
        }
        
        /**
         * Set type
         * @param type If specified, only transactions of the specified type will be included. \&quot;uncategorized\&quot; and \&quot;unapproved\&quot; are currently supported. (optional)
         * @return ListTransactionsRequestBuilder
         */
        public ListTransactionsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set lastKnowledgeOfServer
         * @param lastKnowledgeOfServer The starting server knowledge.  If provided, only entities that have changed since &#x60;last_knowledge_of_server&#x60; will be included. (optional)
         * @return ListTransactionsRequestBuilder
         */
        public ListTransactionsRequestBuilder lastKnowledgeOfServer(Long lastKnowledgeOfServer) {
            this.lastKnowledgeOfServer = lastKnowledgeOfServer;
            return this;
        }
        
        /**
         * Build call for listTransactions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTransactionsCall(budgetId, sinceDate, type, lastKnowledgeOfServer, _callback);
        }


        /**
         * Execute listTransactions request
         * @return TransactionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
         </table>
         */
        public TransactionsResponse execute() throws ApiException {
            ApiResponse<TransactionsResponse> localVarResp = listTransactionsWithHttpInfo(budgetId, sinceDate, type, lastKnowledgeOfServer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTransactions request with HTTP info returned
         * @return ApiResponse&lt;TransactionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionsResponse> executeWithHttpInfo() throws ApiException {
            return listTransactionsWithHttpInfo(budgetId, sinceDate, type, lastKnowledgeOfServer);
        }

        /**
         * Execute listTransactions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionsResponse> _callback) throws ApiException {
            return listTransactionsAsync(budgetId, sinceDate, type, lastKnowledgeOfServer, _callback);
        }
    }

    /**
     * List transactions
     * Returns budget transactions
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
     * @return ListTransactionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of requested transactions </td><td>  -  </td></tr>
     </table>
     */
    public ListTransactionsRequestBuilder listTransactions(String budgetId) throws IllegalArgumentException {
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
            

        return new ListTransactionsRequestBuilder(budgetId);
    }
    private okhttp3.Call updateExistingTransactionCall(String budgetId, String transactionId, PutTransactionWrapper data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/transactions/{transaction_id}"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()))
            .replace("{" + "transaction_id" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingTransactionValidateBeforeCall(String budgetId, String transactionId, PutTransactionWrapper data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling updateExistingTransaction(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling updateExistingTransaction(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling updateExistingTransaction(Async)");
        }

        return updateExistingTransactionCall(budgetId, transactionId, data, _callback);

    }


    private ApiResponse<TransactionResponse> updateExistingTransactionWithHttpInfo(String budgetId, String transactionId, PutTransactionWrapper data) throws ApiException {
        okhttp3.Call localVarCall = updateExistingTransactionValidateBeforeCall(budgetId, transactionId, data, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateExistingTransactionAsync(String budgetId, String transactionId, PutTransactionWrapper data, final ApiCallback<TransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingTransactionValidateBeforeCall(budgetId, transactionId, data, _callback);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateExistingTransactionRequestBuilder {
        private final ExistingTransaction transaction;
        private final String budgetId;
        private final String transactionId;

        private UpdateExistingTransactionRequestBuilder(ExistingTransaction transaction, String budgetId, String transactionId) {
            this.transaction = transaction;
            this.budgetId = budgetId;
            this.transactionId = transactionId;
        }

        /**
         * Build call for updateExistingTransaction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PutTransactionWrapper data = buildBodyParams();
            return updateExistingTransactionCall(budgetId, transactionId, data, _callback);
        }

        private PutTransactionWrapper buildBodyParams() {
            PutTransactionWrapper data = new PutTransactionWrapper();
            data.transaction(this.transaction);
            return data;
        }

        /**
         * Execute updateExistingTransaction request
         * @return TransactionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public TransactionResponse execute() throws ApiException {
            PutTransactionWrapper data = buildBodyParams();
            ApiResponse<TransactionResponse> localVarResp = updateExistingTransactionWithHttpInfo(budgetId, transactionId, data);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateExistingTransaction request with HTTP info returned
         * @return ApiResponse&lt;TransactionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TransactionResponse> executeWithHttpInfo() throws ApiException {
            PutTransactionWrapper data = buildBodyParams();
            return updateExistingTransactionWithHttpInfo(budgetId, transactionId, data);
        }

        /**
         * Execute updateExistingTransaction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The transaction was successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TransactionResponse> _callback) throws ApiException {
            PutTransactionWrapper data = buildBodyParams();
            return updateExistingTransactionAsync(budgetId, transactionId, data, _callback);
        }
    }

    /**
     * Updates an existing transaction
     * Updates a single transaction
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
     * @param transactionId The id of the transaction (required)
     * @param data The transaction to update (required)
     * @return UpdateExistingTransactionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transaction was successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingTransactionRequestBuilder updateExistingTransaction(ExistingTransaction transaction, String budgetId, String transactionId) throws IllegalArgumentException {
        if (transaction == null) throw new IllegalArgumentException("\"transaction\" is required but got null");
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
            

        if (transactionId == null) throw new IllegalArgumentException("\"transactionId\" is required but got null");
            

        return new UpdateExistingTransactionRequestBuilder(transaction, budgetId, transactionId);
    }
    private okhttp3.Call updateMultipleCall(String budgetId, PatchTransactionsWrapper data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/budgets/{budget_id}/transactions"
            .replace("{" + "budget_id" + "}", localVarApiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMultipleValidateBeforeCall(String budgetId, PatchTransactionsWrapper data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling updateMultiple(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling updateMultiple(Async)");
        }

        return updateMultipleCall(budgetId, data, _callback);

    }


    private ApiResponse<SaveTransactionsResponse> updateMultipleWithHttpInfo(String budgetId, PatchTransactionsWrapper data) throws ApiException {
        okhttp3.Call localVarCall = updateMultipleValidateBeforeCall(budgetId, data, null);
        Type localVarReturnType = new TypeToken<SaveTransactionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateMultipleAsync(String budgetId, PatchTransactionsWrapper data, final ApiCallback<SaveTransactionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMultipleValidateBeforeCall(budgetId, data, _callback);
        Type localVarReturnType = new TypeToken<SaveTransactionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateMultipleRequestBuilder {
        private final List<SaveTransactionWithIdOrImportId> transactions;
        private final String budgetId;

        private UpdateMultipleRequestBuilder(List<SaveTransactionWithIdOrImportId> transactions, String budgetId) {
            this.transactions = transactions;
            this.budgetId = budgetId;
        }

        /**
         * Build call for updateMultiple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 209 </td><td> The transactions were successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PatchTransactionsWrapper data = buildBodyParams();
            return updateMultipleCall(budgetId, data, _callback);
        }

        private PatchTransactionsWrapper buildBodyParams() {
            PatchTransactionsWrapper data = new PatchTransactionsWrapper();
            data.transactions(this.transactions);
            return data;
        }

        /**
         * Execute updateMultiple request
         * @return SaveTransactionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 209 </td><td> The transactions were successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public SaveTransactionsResponse execute() throws ApiException {
            PatchTransactionsWrapper data = buildBodyParams();
            ApiResponse<SaveTransactionsResponse> localVarResp = updateMultipleWithHttpInfo(budgetId, data);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateMultiple request with HTTP info returned
         * @return ApiResponse&lt;SaveTransactionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 209 </td><td> The transactions were successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SaveTransactionsResponse> executeWithHttpInfo() throws ApiException {
            PatchTransactionsWrapper data = buildBodyParams();
            return updateMultipleWithHttpInfo(budgetId, data);
        }

        /**
         * Execute updateMultiple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 209 </td><td> The transactions were successfully updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SaveTransactionsResponse> _callback) throws ApiException {
            PatchTransactionsWrapper data = buildBodyParams();
            return updateMultipleAsync(budgetId, data, _callback);
        }
    }

    /**
     * Update multiple transactions
     * Updates multiple transactions, by &#x60;id&#x60; or &#x60;import_id&#x60;.
     * @param budgetId The id of the budget. \&quot;last-used\&quot; can be used to specify the last used budget and \&quot;default\&quot; can be used if default budget selection is enabled (see: https://api.ynab.com/#oauth-default-budget). (required)
     * @param data The transactions to update. Each transaction must have either an &#x60;id&#x60; or &#x60;import_id&#x60; specified. If &#x60;id&#x60; is specified as null an &#x60;import_id&#x60; value can be provided which will allow transaction(s) to be updated by its &#x60;import_id&#x60;. If an &#x60;id&#x60; is specified, it will always be used for lookup.  You should not specify both &#x60;id&#x60; and &#x60;import_id&#x60;.  Updating an &#x60;import_id&#x60; on an existing transaction is not allowed; if an &#x60;import_id&#x60; is specified, it will only be used to lookup the transaction. (required)
     * @return UpdateMultipleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 209 </td><td> The transactions were successfully updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMultipleRequestBuilder updateMultiple(List<SaveTransactionWithIdOrImportId> transactions, String budgetId) throws IllegalArgumentException {
        if (transactions == null) throw new IllegalArgumentException("\"transactions\" is required but got null");
        if (budgetId == null) throw new IllegalArgumentException("\"budgetId\" is required but got null");
            

        return new UpdateMultipleRequestBuilder(transactions, budgetId);
    }
}
